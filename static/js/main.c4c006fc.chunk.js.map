{"version":3,"sources":["components/Navbar/Navbar-item/NavBarItem.tsx","components/Navbar/NavBar.tsx","components/Header/Header.tsx","components/Dashboard/MarketTable/MarketTable.tsx","api/index.ts","utils/index.ts","components/Dashboard/Dashboard.tsx","App.tsx","serviceWorker.ts","components/UpdateNotification/UpdateNotification.tsx","index.tsx"],"names":["NavBarItem","props","item","className","href","link","label","NavBar","menuItems","map","index","key","menu","Header","xmlns","viewBox","d","src","alt","MarketTable","coins","responseTime","Fragment","coin","name","image","width","symbol","Intl","NumberFormat","style","currency","format","current_price","price_change_percentage_1h_in_currency","price_change_percentage_24h_in_currency","price_change_percentage_7d_in_currency","price_change_percentage_30d_in_currency","total_volume","circulating_supply","total_supply","market_cap","colSpan","axios","interceptors","request","use","config","log","debug","error","Promise","reject","response","axiosInstance","create","baseURL","getMarkets","options","a","vs_currency","ids","order","page","per_page","price_change_percentage","sparkline","Error","coinIds","undefined","priceChangePercentage","join","params","utils","get","coinMarketsResponse","data","removeUndefinedValues","obj","Object","keys","reduce","newObj","fetchMarketData","console","time","api","markets","timeEnd","setLevel","Dashboard","useState","setMarkets","loading","setLoading","setResponseTime","refreshData","startTime","Date","now","marketsResults","useEffect","disabled","onClick","App","isLocalhost","Boolean","window","location","hostname","match","register","navigator","URL","process","origin","addEventListener","swUrl","fetch","headers","then","contentType","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","UpdateNotification","showReload","setShowReload","waitingWorker","setWaitingWorker","onSWUpdate","waiting","reloadPage","postMessage","type","Snackbar","open","message","anchorOrigin","vertical","horizontal","action","Button","color","size","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c4c006fc.chunk.js","sourcesContent":["import React from 'react';\nimport { MenuItem } from '../../../model';\n\ninterface NavBarItemProps {\n  item: MenuItem;\n}\n\nconst NavBarItem: React.FunctionComponent<NavBarItemProps> = (props: NavBarItemProps) => {\n  const { item } = props;\n  return (\n    <div className='flex -mb-px mr-8'>\n      <a href={item.link} className='no-underline text-blue-900 md:text-blue-900 flex items-center py-4 border-b border-blue-900'>\n        {item.label}\n      </a>\n    </div>\n  );\n};\n\nexport default NavBarItem;\n","import React from 'react';\nimport { MenuItem } from '../../model';\nimport NavBarItem from \"./Navbar-item/NavBarItem\";\n\ninterface NavBarProps {\n  menuItems: MenuItem[];\n}\n\nconst NavBar: React.FunctionComponent<NavBarProps> = (props: NavBarProps) => {\n  const { menuItems } = props;\n  return (\n    <div className='hidden bg-white md:block md:border-b'>\n      <div className='container mx-auto px-4'>\n        <div className='md:flex'>{!!menuItems && menuItems.map((item, index) => <NavBarItem key={index} item={item} />)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default NavBar;\n","import React from 'react';\nimport { MenuItem } from '../../model';\nimport NavBar from '../Navbar/NavBar';\n\nconst menu: MenuItem[] = [\n  {\n    label: 'Dashboard',\n    link: '#',\n  },\n];\n\nconst Header: React.FunctionComponent = () => {\n  return (\n    <header className='DashboardContainer-header'>\n      <div className='bg-blue-900'>\n        <div className='container mx-auto px-4'>\n          <div className='flex items-center md:justify-between py-4'>\n            <div className='w-1/4 md:hidden'>\n              <svg className='fill-current text-white h-8 w-8' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'>\n                <path d='M16.4 9H3.6c-.552 0-.6.447-.6 1 0 .553.048 1 .6 1h12.8c.552 0 .6-.447.6-1 0-.553-.048-1-.6-1zm0 4H3.6c-.552 0-.6.447-.6 1 0 .553.048 1 .6 1h12.8c.552 0 .6-.447.6-1 0-.553-.048-1-.6-1zM3.6 7h12.8c.552 0 .6-.447.6-1 0-.553-.048-1-.6-1H3.6c-.552 0-.6.447-.6 1 0 .553.048 1 .6 1z' />\n              </svg>\n            </div>\n            <div className='w-1/2 md:w-auto text-center text-white text-2xl font-medium'>Crypto Dashboard</div>\n            <div className='w-1/4 md:w-auto md:flex text-right'>\n              <div>\n                <img\n                  className='inline-block h-8 w-8 rounded-full'\n                  src='https://avatars0.githubusercontent.com/u/4323180?s=460&v=4'\n                  alt=''\n                />\n              </div>\n              <div className='hidden md:block md:flex md:items-center ml-2'>\n                <span className='text-white text-sm mr-1'>Admin</span>\n                <div>\n                  <svg className='fill-current text-white h-4 w-4 block opacity-50' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'>\n                    <path d='M4.516 7.548c.436-.446 1.043-.481 1.576 0L10 11.295l3.908-3.747c.533-.481 1.141-.446 1.574 0 .436.445.408 1.197 0 1.615-.406.418-4.695 4.502-4.695 4.502a1.095 1.095 0 0 1-1.576 0S4.924 9.581 4.516 9.163c-.409-.418-.436-1.17 0-1.615z' />\n                  </svg>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <NavBar menuItems={menu} />\n    </header>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport {CoinMarket} from '../../../model';\n\ninterface MarketTableProps {\n  coins: CoinMarket[];\n  responseTime: number;\n}\n\nconst MarketTable: React.FunctionComponent<MarketTableProps> = (props: MarketTableProps) => {\n  let { coins, responseTime } = props;\n  return (\n    <React.Fragment>\n      <table className='table-auto mx-auto'>\n        <thead>\n          <tr>\n            <th className='px-4 py-2'>Coin</th>\n            <th className='px-4 py-2'>Symbol</th>\n            <th className='px-4 py-2'>Price</th>\n            <th className='px-4 py-2'>1h</th>\n            <th className='px-4 py-2'>24h</th>\n            <th className='px-4 py-2'>7d</th>\n            <th className='px-4 py-2'>30d</th>\n            <th className='px-4 py-2'>24h Volume</th>\n            <th className='px-4 py-2'>Quantity</th>\n            <th className='px-4 py-2'>Total Quantity</th>\n            <th className='px-4 py-2'>Market Capital</th>\n          </tr>\n        </thead>\n        <tbody>\n          {coins &&\n            coins.map((coin, index) => {\n              return (\n                <tr key={index}>\n                  <td>\n                    <img className='float-left' alt={coin.name} src={coin.image} width={24} /> {coin.name}\n                  </td>\n                  <td className='px-4 py-2'>{coin.symbol}</td>\n                  <td className='px-4 py-2'>\n                    {new Intl.NumberFormat('en', { style: 'currency', currency: 'USD' }).format(coin.current_price)}\n                  </td>\n                  <td className='px-4 py-2'>\n                    {coin.price_change_percentage_1h_in_currency\n                      ? `${new Intl.NumberFormat('en', { style: 'decimal' }).format(coin.price_change_percentage_1h_in_currency)}%`\n                      : '-'}\n                  </td>\n                  <td className='px-4 py-2'>\n                    {coin.price_change_percentage_24h_in_currency\n                      ? `${new Intl.NumberFormat('en', { style: 'decimal' }).format(coin.price_change_percentage_24h_in_currency)}%`\n                      : '-'}\n                  </td>\n                  <td className='px-4 py-2'>\n                    {coin.price_change_percentage_7d_in_currency\n                      ? `${new Intl.NumberFormat('en', { style: 'decimal' }).format(coin.price_change_percentage_7d_in_currency)}%`\n                      : '-'}\n                  </td>\n                  <td className='px-4 py-2'>\n                    {coin.price_change_percentage_30d_in_currency\n                      ? `${new Intl.NumberFormat('en', { style: 'decimal' }).format(coin.price_change_percentage_30d_in_currency)}%`\n                      : '-'}\n                  </td>\n                  <td className='px-4 py-2'>\n                    {new Intl.NumberFormat('en', { style: 'currency', currency: 'USD' }).format(coin.total_volume)}\n                  </td>\n                  <td className='px-4 py-2'>{new Intl.NumberFormat().format(coin.circulating_supply)}</td>\n                  <td className='px-4 py-2'>{coin.total_supply ? new Intl.NumberFormat().format(coin.total_supply) : '-'}</td>\n                  <td className='px-4 py-2'>\n                    {new Intl.NumberFormat('en', { style: 'currency', currency: 'USD' }).format(coin.market_cap)}\n                  </td>\n                </tr>\n              );\n            })}\n        </tbody>\n        <tfoot>\n          <tr>\n            <td colSpan={11}>Response Time {responseTime} ms.</td>\n          </tr>\n        </tfoot>\n      </table>\n    </React.Fragment>\n  );\n};\n\nexport default MarketTable;\n","import axios, { AxiosResponse } from 'axios';\nimport log from 'loglevel';\nimport { Coin, CoinMarket, MarketOptions, Prices } from '../model';\nimport * as utils from '../utils';\n\n// Add a request interceptor\naxios.interceptors.request.use(\n  function (config) {\n    // Do something before request is sent\n    log.debug('Starting Request', config);\n    return config;\n  },\n  function (error) {\n    // Do something with request error\n    return Promise.reject(error);\n  },\n);\n\n// Add a response interceptor\naxios.interceptors.response.use(\n  function (response: any) {\n    // Any status code that lie within the range of 2xx cause this function to trigger\n    // Do something with response data\n    log.debug('Response:', response);\n    return response;\n  },\n  function (error) {\n    // Any status codes that falls outside the range of 2xx cause this function to trigger\n    // Do something with response error\n    log.error('Response Error:', error);\n    return Promise.reject(error);\n  },\n);\n\nconst axiosInstance = axios.create({\n  baseURL: 'https://api.coingecko.com/api/v3',\n});\n\nexport async function getCoins(): Promise<Coin[]> {\n  try {\n    const coinsResponse: AxiosResponse<Coin[]> = await axiosInstance.get<Coin[]>('/coins/list');\n    return coinsResponse.data;\n  } catch (err) {\n    throw err;\n  }\n}\n\nexport async function getMarkets(options: MarketOptions): Promise<CoinMarket[]> {\n  try {\n    const { vs_currency, ids, order, page, per_page, price_change_percentage, sparkline } = options;\n    if (!vs_currency) {\n      throw new Error('A Currency is required');\n    }\n\n    let coinIds = undefined;\n    let priceChangePercentage = undefined;\n\n    if (!!ids) {\n      coinIds = ids.join(',');\n    }\n    if (!!price_change_percentage) {\n      priceChangePercentage = price_change_percentage.join(',');\n    }\n\n    let params: any = {\n      vs_currency,\n      ids: coinIds,\n      order,\n      page,\n      per_page,\n      price_change_percentage: priceChangePercentage,\n      sparkline,\n    };\n\n    params = utils.removeUndefinedValues(params);\n\n    const coinMarketsResponse: AxiosResponse<CoinMarket[]> = await axiosInstance.get<CoinMarket[]>('/coins/markets', { params });\n    return coinMarketsResponse.data;\n  } catch (err) {\n    throw err;\n  }\n}\n\nexport async function getSupportedCurrencies(): Promise<string[]> {\n  try {\n    const currenciesResponse: AxiosResponse<string[]> = await axiosInstance.get<string[]>('/simple/supported_vs_currencies');\n    return currenciesResponse.data;\n  } catch (err) {\n    throw err;\n  }\n}\n\nexport async function getPrices(coinIds: string | string[], currencyIds: string | string[]): Promise<Prices> {\n  try {\n    const ids: string = Array.isArray(coinIds) ? coinIds.join(',') : coinIds;\n    const vs_currencies: string = Array.isArray(currencyIds) ? currencyIds.join(',') : currencyIds;\n    const params = { ids, vs_currencies };\n    const currenciesResponse: AxiosResponse<Prices> = await axiosInstance.get<Prices>('/simple/price', { params });\n    return currenciesResponse.data;\n  } catch (err) {\n    throw err;\n  }\n}\n","import { CoinMarket, MapOf } from '../model';\nimport * as api from '../api';\n\nexport function getMapOf<T>(array: T[], key: keyof T): MapOf<T> {\n  return array.reduce((map: MapOf<T>, element: T) => {\n    const keyValue: any = element[key];\n    map[keyValue] = element;\n    return map;\n  }, {});\n}\n\nexport function getArrayOf<T>(map: MapOf<T>, keyIds: string[]): T[] {\n  return keyIds.map((keyId) => map[keyId]);\n}\n\nexport function removeUndefinedValues(obj: any): any {\n  return Object.keys(obj).reduce((newObj: any, key: string) => {\n    if (!!obj[key]) {\n      newObj[key] = obj[key];\n    }\n\n    return newObj;\n  }, {});\n}\n\nexport const fetchMarketData = async () => {\n  try {\n    console.log('fetching Market Data');\n    console.time('fetching market data');\n    const markets: CoinMarket[] = await api.getMarkets({\n      vs_currency: 'usd',\n      per_page: 20,\n      price_change_percentage: ['1h', '24h', '7d', '30d'],\n    });\n\n    console.log('fetching Market Data End');\n    console.timeEnd('fetching market data');\n    return markets;\n  } catch (error) {\n    console.error('fetching Market Data Error');\n    console.timeEnd('fetching market data');\n    throw error;\n  }\n};\n","import React, { useEffect, useState } from 'react';\nimport Header from '../Header/Header';\nimport { CoinMarket } from '../../model';\nimport log from 'loglevel';\nimport MarketTable from './MarketTable/MarketTable';\nimport * as utils from '../../utils';\n\nlog.setLevel('debug', true);\n\nconst Dashboard: React.FunctionComponent = () => {\n  const [markets, setMarkets] = useState<CoinMarket[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [responseTime, setResponseTime] = useState<number>(-1);\n  const refreshData = async () => {\n    setLoading(true);\n    const startTime = Date.now();\n    setResponseTime(0);\n    try {\n      const marketsResults = await utils.fetchMarketData();\n      setMarkets(marketsResults);\n    } catch (error) {\n      console.error('Error', error);\n    }\n\n    setResponseTime(Date.now() - startTime);\n    setLoading(false);\n  };\n  useEffect(() => {\n    refreshData();\n  }, []);\n  return (\n    <div className='DashboardContainer'>\n      <Header />\n      <React.Fragment>\n        <div className='mx-auto px-4 mt-2'>\n          <div className='flex flex-wrap'>\n            <button className='btn' disabled={loading} onClick={refreshData}>\n              Refresh Data\n            </button>\n          </div>\n        </div>\n        {!loading && (\n          <div className='mx-auto px-4 mt-2'>\n            <div className='flex flex-wrap'>\n              <MarketTable coins={markets} responseTime={responseTime} />\n            </div>\n          </div>\n        )}\n      </React.Fragment>\n    </div>\n  );\n};\nexport default Dashboard;\n","import React from 'react';\nimport './assets/main.css';\nimport Dashboard from './components/Dashboard/Dashboard';\n\nconst App: React.FunctionComponent = () => {\n  return (\n    <div className='App'>\n      <Dashboard />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useEffect, useState } from 'react';\nimport * as serviceWorker from '../../serviceWorker';\nimport { Button, Snackbar } from '@material-ui/core';\n\nconst UpdateNotification: React.FunctionComponent = () => {\n  const [showReload, setShowReload] = useState(false);\n  const [waitingWorker, setWaitingWorker] = useState<ServiceWorker | null>(null);\n  const onSWUpdate = (registration: ServiceWorkerRegistration) => {\n    setShowReload(true);\n    setWaitingWorker(registration.waiting);\n  };\n\n  useEffect(() => {\n    // If you want your app to work offline and load faster, you can change\n    // unregister() to register() below. Note this comes with some pitfalls.\n    // Learn more about service workers: https://bit.ly/CRA-PWA\n    serviceWorker.register({ onUpdate: onSWUpdate });\n  }, []);\n\n  const reloadPage = () => {\n    waitingWorker?.postMessage({ type: 'SKIP_WAITING' });\n    setShowReload(false);\n    window.location.reload();\n  };\n\n  return (\n    <Snackbar\n      open={showReload}\n      message='A new version is available!'\n      onClick={reloadPage}\n      anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n      action={\n        <Button color='inherit' size='small' onClick={reloadPage}>\n          Reload\n        </Button>\n      }\n    />\n  );\n};\n\nexport default UpdateNotification;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport UpdateNotification from './components/UpdateNotification/UpdateNotification';\n\nReactDOM.render(\n  <React.StrictMode>\n    <React.Fragment>\n      <UpdateNotification />\n    </React.Fragment>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}